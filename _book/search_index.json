[
["index.html", "Bloomberg Excel query tool for time series data 1 At a glance", " Bloomberg Excel query tool for time series data Olivier Bauthéac 1 At a glance Sitting on the desks of 325,000 of the world’s most influential decision makers, the Bloomberg Terminal is a modern icon of financial markets. It delivers unparalleled coverage of markets and securities with information across asset classes — from fixed income to equities, to foreign exchange, commodities and derivatives — integrated in one place and delivered in real time to any internet connected desktop or mobile device. The Bloomberg Office Tools suite comes with an Excel add in that allows the user to pull Bloomberg data directly from any Excel workbook. The Excel add in has a few shortcomings when in comes to time series queries however. The data retrieved is typically meant to be processed and analysed using a programming language (R, Python, etc.) or a data processing software (Stata, Eviews, etc.). The Excel add in crams all the query results into a single spreadsheet, mixing tickers and variables, which makes further machine led manipulation rather tedious. Besides the add in takes a singleton approach to the data query and is not well designed for recurrence. The available refresh function updates the query living on a particular spreadsheet by filling potential existing gaps but does not complete the times series beyond the date it was originally made. In other words, a query made sometimes last year for a particular set of assets and variables could originally have shown missing data for some combination(s) of asset(s), variable(s) and date(s) or period(s). The missing data could have been added to the Bloomberg database over the course of the past year and refreshing the query today would fill the corresponding gaps. It would not however update the time series with data beyond the date the query was originally made last year and the user would be left with a full year of missing data. Time series data predominates in finance and financial economics; these defects therefore come at a significant cost in convenience for research work in those fields. The query engine put forward hereby addresses these issues and provides the researcher with a convenient tool for financial times series querying and updating. "],
["preliminary-configuration.html", "2 Preliminary configuration 2.1 Bloomberg 2.2 Excel", " 2 Preliminary configuration 2.1 Bloomberg The tools proposed here only work on a Bloomberg terminal. Once logged in on a Bloomberg terminal make sure a Bloomberg session is open before proceeding further. 2.2 Excel Macros are required for the query tools hereby put forward to work properly but are disabled by default in Excel. To enable them the developer tools have to be accessible from the Excel’s ribbon. Clicking File, Options, Customize Ribbon in an open Excel workbook opens a page similar to the following: Make sure the “Developer” box is ticked and click OK. the Developer tools tab now shows up in the Excel’s ribbon. From the developer tools tab click “Macro Security” and enable macros by ticking two boxes on the corresponding settings page: Click OK. Macros are now enabled; you’re all set. "],
["equity.html", "3 Equity 3.1 Global settings 3.2 Firm level settings 3.3 Coming up", " 3 Equity The Bloomberg query Excel workbook for equity times series is available for download here. 3.1 Global settings The global settings live on the worksheet named “query”: From there, input a start date and end date in the appropriate format (dd/mm/yyyy) as well as a frequency. The data are available at the daily (d), weekly (w), monthly (m) , quarterly (q) and yearly (y) frequencies. Start date, end date and frequency default to 01/01/1970, today’s date and daily respectively. 3.2 Firm level settings Assets are mapped to “tickers” in the Bloomberg world. Querying equity data therefore requires the corresponding ticker(s) for the firm or set of firms for which data is desired. Tickers can be found by opening a Bloomberg window and typing a firm’s name in the search bar, the firm’s ticker will soon appear in the search results. Once collected, tickers can be used here to query time series data for the corresponding firms. This workbook comes with an example query for the Archer-Daniels-Midland (ADM US Equity) and Nucor (NUE US Equity) corporations. Click on the Archer-Daniels-Midland tab: The firm ticker goes in the top left cell (“A1”): “ADM US Equity” is the ticker for Archer-Daniels-Midland. Variables are mapped to codes in the Bloomberg world; codes for particular variables can be retrieved from a Bloomberg session by typing variable names in the search bar. The corresponding codes will soon be displayed in the search results. Once collected the codes can be used here to query firm level data. On a firm’s spreadsheet the variable codes go on the second row from column “B” onwards: In this example the variables queried for are close price (“PX_LAST”), trailing one year earnings per share (“TRAIL_12M_EPS”) and trailing one year dividend (“TRAIL_12M_DVD_PER_SH”). Variables for which data is not available at the desired frequency will be provided at the highest frequency available. In this example the close price data is provided at the daily frequency as required but the EPS and dividend data are reported quarterly with the figures repeated for all dates belonging to the corresponding quarter. Any number of variables can be added by inputting their codes in the next available columns. The sales figure (“SALES_REV_TURN”) can be added as follows: After the query is run the data shows up in the corresponding column(s): Similarly any number of firms can be added. To add a firm, create a new tab by clicking the plus icon to the right of the rightmost tab: Input a firm’s ticker in the top left cell, “KHC US Equity” (Kraft-Heinz corporation) in this case as well as the codes for the desired variables: The worksheet can be renamed by right-clicking on the corresponding tab: The query can then by run by going back to the “query tab” and clicking the “query” button: After a few seconds the data should be populated for all firms and variables: 3.3 Coming up The development of the Bloomberg query tool hereby put forward has now reached the beta version stage; the product is ready for being tested for feedback by end users. The next development stage will be dedicated to user experience, focussing in particular on improving the user interface. User navigation through the data sheets should be limited to the maximum and ideally would become irrelevant. This will be achieved by migrating all settings to the query sheet which shall become the sole interface to the end user: 3.3.1 Parameters table Parameters for the data query will be set to the desired values in a dedicated table: Start date: start date for the query here in the following format: dd/mm/yyyy. End date: end date for the query here in the following format: dd/mm/yyyy. If omitted, defaults to the current system date. Frequency: frequency at which you want the data to be queried. Available frequencies are “d” (daily), “w” (weekly), “m” (monthly), “q” (quarterly), “y” (yearly). Currency: insert the desired currency for the query. If omitted, defaults to the default currency for the security as specified in Bloomberg. 3.3.2 Fields table Similarly, desired variables for the query will be input in a dedicated table: The desired field(s) for the data query will be indicated by the user in this table using the corresponding Bloomberg symbol(s). Query fields will be added or deleted by adding or removing rows from the table as desired. This will be achieved by right clicking on a cell in the table, navigating to the “insert” tab and selecting the desired action: New query field: Delete query field: 3.3.3 Tickers table Tickers will also live on a dedicated table where they will be input by the user in a single column format: Tickers will be added or deleted as desired in the same way as fields are dealt with in the corresponding table as demonstrated above. 3.3.4 Static data table The tickers table will eventually allow for static data queries. In other words, the user will be able to query static data for the desired tickers directly from the query sheet: Fields will be added or removed by inserting or deleting columns from the table: New query field: Delete query field: "],
["futures.html", "4 Futures 4.1 Global settings 4.2 Futures series settings 4.3 Coming up", " 4 Futures The Bloomberg query Excel workbook for futures times series is available for download here. 4.1 Global settings The global settings live on the worksheet named “query”: From there, input a start date and end date in the appropriate format (dd/mm/yyyy) as well as a frequency. The data are available at the daily (d), weekly (w), monthly (m) , quarterly (q) and yearly (y) frequencies. Start date, end date and frequency default to 01/01/1970, today’s date and daily respectively. 4.2 Futures series settings Assets are mapped to “tickers” in the Bloomberg world. Querying futures data therefore requires the corresponding ticker(s) for the futures or futures series for which data is desired. Tickers can be found by opening a Bloomberg window and typing the name of the asset for which futures data is desired in the search bar, the futures’ generic ticker will soon appear in the search results. Futures comes in series that include multiple contracts addressing various maturities over the same year. Each contract comes with its own ticker with the tickers for a series constructed on the same pattern and the only difference belonging to the contract’s position on the term structure. For example, the generic ticker for the aluminium futures series, traded on the London Metal Exchange (LME), is “LAA Comdty”. The ticker for nearby contract on this series (the contract with the shortest maturity) is “LA1 Comdty” while that for the second contract is “LA2 Comdty” and so on. Once collected, tickers can be used here to query time series data for the corresponding futures series. This workbook comes with an example query for some metal futures series traded on the LME, including aluminium, copper, lead, nickel, steel, tin and zinc. Click on the aluminium tab: The futures contract ticker goes in the top left cell (“A1”): “LA1 Comdty” is the ticker for the nearby contract on the LME aluminium term structure. Variables are mapped to codes in the Bloomberg world; codes for particular variables can be retrieved from a Bloomberg session by typing variable names in the search bar. The corresponding codes will soon be displayed in the search results. Once collected the codes can be used here to query firm level data. On a futures series’ spreadsheet the variable codes go on the second row from column “B” onwards: In this example the variables queried for are volume (“PX_VOLUME”), open price (“PX_OPEN”), high price (“PX_HIGH”), low price (“PX_LOW”) and close price (“PX_LAST”). The data will be provided from the earliest date available on or after the start date provided. In this example data is provided from 1997 onwards while the start date for the query is January, 1st, 1990. These contracts were not yet traded on the LME in 1990, data is therefore provided from the earliest date for which there are quotation records in the Bloomberg database. Variables for which data is not available for particular dates will be shown as “#N/A N/A”. In this example only the close price data is available from 1997; data for the other variables is only provided from 1998 onwards. Variables for which data is not available at the desired frequency will be provided at the highest frequency available with the corresponding figures repeated for all dates belonging to the corresponding period. Any number of variables can be added by inputting their codes in the next available columns. The open interest (“OPEN_INT”) figure can be added as follows: After the query is run the data shows up in the corresponding columns: Similarly any number of contract on the series can be added by inputting the corresponding ticker on the first row to the right of the rightmost data column, leaving one column blank, and copying and pasting the variable cells: The input variables for the leftmost contract apply for all the contracts in the series. After the query is run the data shows up in the corresponding columns: Any number of futures series can be added. To add a series, create a new tab by clicking the plus icon to the right of the rightmost tab: Input the contract tickers and variable codes: The worksheet can be renamed by right-clicking on the corresponding tab: The query can then by run by going back to the “query tab” and clicking the “query” button: After a few seconds the data should be populated for all firms and variables: 4.3 Coming up The development of the Bloomberg query tool hereby put forward has now reached the beta version stage; the product is ready for being tested for feedback by end users. The next development stage will be dedicated to user experience, focussing in particular on improving the user interface. User navigation through the data sheets should be limited to the maximum and ideally would become irrelevant. This will be achieved by migrating all settings to the query sheet which shall become the sole interface to the end user: 4.3.1 Parameters table Parameters for the data query will be set to the desired values in a dedicated table: Start date: start date for the query here in the following format: dd/mm/yyyy. End date: end date for the query here in the following format: dd/mm/yyyy. If omitted, defaults to the current system date. Frequency: frequency at which you want the data to be queried. Available frequencies are “d” (daily), “w” (weekly), “m” (monthly), “q” (quarterly), “y” (yearly). Currency: insert the desired currency for the query. If omitted, defaults to the default currency for the security as specified in Bloomberg. Term structure length: number of contracts in the various desired series to query data for starting from the nearby contract. Defaults to 5: queries data for the first five contracts on the term structure of the corresponding futures series. Roll type. Bloomberg allows to construct futures times series using a number of different roll methods. Rolling in futures parlance refers to the set of transaction that occurs when a position is moved from one futures to the next as the current position contract nears maturity. The current version of the query tool hereby put forward restricts the time series construction to rolling with the active contract, where the roll is contingent on liquidity. The next version will allow to use all the roll methods put forward by Bloomberg. The methods available include “Relative to Expiration”, “Fixed Day of Month”, “With Active Future”, “Relative to First Notice”, “At First Delivery” and “At Option Expiration”. Default to “With Active Future” (A). Roll delay - days: when constructing a futures times series with a “relative” roll type (“Relative to Expiration”, “Relative to First Notice”), allows to set the delay for the roll in days relative to the corresponding event. Roll delay - months: when constructing a futures times series with a “relative” roll type (“Relative to Expiration”, “Relative to First Notice”), allows to set the delay for the roll in months relative to the corresponding event. Roll adjustment method: Bloomberg allows to adjust the entire futures price series for the impact of the roll. Various methods are available to that end including “Difference”, “Ratio”, and “Average”. Further details on each of these can be found by here. 4.3.2 Fields table Similarly, desired variables for the query will be input in a dedicated table: The desired field(s) for the data query will be indicated by the user in this table using the corresponding Bloomberg symbol(s). Query fields will be added or deleted by adding or removing rows from the table as desired. This will be achieved by right clicking on a cell in the table, navigating to the “insert” tab and selecting the desired action: New query field: Delete query field: 4.3.3 Tickers table Tickers will also live on a dedicated table: Tickers will be added or deleted as desired in the same way as fields are dealt with in the corresponding table as demonstrated above. "]
]
